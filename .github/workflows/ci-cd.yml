name: "ðŸ”„ CI/CD Pipeline: Build â†’ Push â†’ Deploy"

# Trigger: bei jedem Push in den main-Branch
on:
  push:
    branches:
      - main

env:
  # Registry-URL fÃ¼r Docker Hub
  REGISTRY: docker.io/${{ secrets.DOCKER_USERNAME }}
  # Wir taggen Images mit dem Commit-SHA
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-push:
    name: ðŸ›  Build & Push Docker-Images
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up QEMU (fÃ¼r Multi-Arch Builds)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # â”€â”€â”€ Catalog Service â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      - name: Build & Push catalog-service
        uses: docker/build-push-action@v4
        with:
          context: catalog-service
          file: catalog-service/Dockerfile
          platforms: linux/arm64,linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/catalog-service:${{ env.IMAGE_TAG }}

      # â”€â”€â”€ Cart Service â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      - name: Build & Push cart-service
        uses: docker/build-push-action@v4
        with:
          context: cart-service
          file: cart-service/Dockerfile
          platforms: linux/arm64,linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/cart-service:${{ env.IMAGE_TAG }}

      # â”€â”€â”€ Customer Service â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      - name: Build & Push customer-service
        uses: docker/build-push-action@v4
        with:
          context: customer-service
          file: customer-service/Dockerfile
          platforms: linux/arm64,linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/customer-service:${{ env.IMAGE_TAG }}

      # â”€â”€â”€ Order Service â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      - name: Build & Push order-service
        uses: docker/build-push-action@v4
        with:
          context: order-service
          file: order-service/Dockerfile
          platforms: linux/arm64,linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/order-service:${{ env.IMAGE_TAG }}

      # â”€â”€â”€ Event Bus â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      - name: Build & Push event-service
        uses: docker/build-push-action@v4
        with:
          context: event-service
          file: event-service/Dockerfile
          platforms: linux/arm64,linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/event-service:${{ env.IMAGE_TAG }}

      # â”€â”€â”€ Frontend â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      - name: Build & Push frontend
        uses: docker/build-push-action@v4
        with:
          context: frontend
          file: frontend/Dockerfile
          platforms: linux/arm64,linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/frontend:${{ env.IMAGE_TAG }}

  deploy:
    name: ðŸš€ Deploy to Kubernetes via Helm
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Install Helm (falls nicht vorhanden)
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Deploy mit Helm
        run: |
          helm upgrade --install webshop \
            ./helm/webshop \
            --namespace webshop \
            --create-namespace \
            --set image.registry=${{ env.REGISTRY }} \
            --set image.tag=${{ env.IMAGE_TAG }}

